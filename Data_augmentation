import os
import cv2
from tqdm import tqdm

def flip_labels(labels, flip_type):
    new_labels = []
    for label in labels:
        class_label, x_center, y_center, width, height = label.split()
        x_center, y_center, width, height = float(x_center), float(y_center), float(width), float(height)

        if flip_type == "horizontal":
            x_center_flipped = 1.0 - x_center
            y_center_flipped = y_center
        elif flip_type == "vertical":
            x_center_flipped = x_center
            y_center_flipped = 1.0 - y_center
        elif flip_type == "both":
            x_center_flipped = 1.0 - x_center
            y_center_flipped = 1.0 - y_center

        # Koordinatlar 0 ile 1 arasında olacak şekilde sınırlanır
        x_center_flipped = max(0.0, min(1.0, x_center_flipped))
        y_center_flipped = max(0.0, min(1.0, y_center_flipped))

        new_label = f"{class_label} {x_center_flipped} {y_center_flipped} {width} {height}\n"
        new_labels.append(new_label)

    return new_labels

def augment_data(original_images_folder, label_folder, output_folder):
    original_images = os.listdir(original_images_folder)

    output_images_folder = os.path.join(output_folder, "images")
    os.makedirs(output_images_folder, exist_ok=True)

    output_labels_folder = os.path.join(output_folder, "labels")
    os.makedirs(output_labels_folder, exist_ok=True)

    for image_name in tqdm(original_images, desc="İşleniyor"):
        image_path = os.path.join(original_images_folder, image_name)
        original_image = cv2.imread(image_path)

        label_path = os.path.join(label_folder, f"{os.path.splitext(image_name)[0]}.txt")

        with open(label_path, "r") as file:
            original_labels = file.readlines()

        # Çoğaltılmamış fotoğrafları kaydet
        output_image_path = os.path.join(output_images_folder, f"{os.path.splitext(image_name)[0]}.bmp")
        cv2.imwrite(output_image_path, original_image)

        output_label_path = os.path.join(output_labels_folder, f"{os.path.splitext(image_name)[0]}.txt")
        with open(output_label_path, "w") as file:
            file.writelines(original_labels)

        # Yatay çevirme işlemi
        flipped_image = cv2.flip(original_image, 1)
        flipped_labels = flip_labels(original_labels, "horizontal")

        output_image_path = os.path.join(output_images_folder, f"{os.path.splitext(image_name)[0]}_flipped.bmp")
        cv2.imwrite(output_image_path, flipped_image)

        output_label_path = os.path.join(output_labels_folder, f"{os.path.splitext(image_name)[0]}_flipped.txt")
        with open(output_label_path, "w") as file:
            file.writelines(flipped_labels)

        # Dikey çevirme işlemi
        flipped_image = cv2.flip(original_image, 0)
        flipped_labels = flip_labels(original_labels, "vertical")

        output_image_path = os.path.join(output_images_folder, f"{os.path.splitext(image_name)[0]}_flipped_vertical.bmp")
        cv2.imwrite(output_image_path, flipped_image)

        output_label_path = os.path.join(output_labels_folder, f"{os.path.splitext(image_name)[0]}_flipped_vertical.txt")
        with open(output_label_path, "w") as file:
            file.writelines(flipped_labels)

        # Dikey ve Yatay çevirme birleşik (Önce dikey, sonra yatay)
        flipped_image = cv2.flip(original_image, 0)
        flipped_image = cv2.flip(flipped_image, 1)
        flipped_labels = flip_labels(original_labels, "both")

        output_image_path = os.path.join(output_images_folder, f"{os.path.splitext(image_name)[0]}_flipped_vertical_horizontal.bmp")
        cv2.imwrite(output_image_path, flipped_image)

        output_label_path = os.path.join(output_labels_folder, f"{os.path.splitext(image_name)[0]}_flipped_vertical_horizontal.txt")
        with open(output_label_path, "w") as file:
            file.writelines(flipped_labels)


original_images_folder = r"C:\Users\user\Desktop\classification\Asymetry\2"
label_folder = r"C:\Users\user\Desktop\Etiketler\Asymetry\2"
output_folder_augmented = r"C:\Users\user\Desktop\classification\Asymetry"


augment_data(original_images_folder, label_folder, output_folder_augmented)
